openapi: 3.0.0
info:
  title: API сервер для проекта "Шесть городов".
  description: |-
    * Список ресурсов и маршрутов сервера "Шесть городов."
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 2.0.0

tags:
  - name: offers
    description: Действия с предложениями.
  - name: users
    description: Действия с пользователем.
  - name: comments
    description: Действия с комментариями.

paths:

  /offers:
    get:
      tags:
        - offers
      summary: Получение списка предложений по аренде
      description: Получает список предложений по аренде
      parameters:
        - in: header
          name: token
          description: JWT token bearer
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Получение списка предложений.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offersList'
        "400":
          description: 'Список предложений недоступен: ошибка запроса.'

    post:
      tags:
        - offers
      summary: Создание нового предложения
      description: Создает новое предложение по аренде
      parameters:
        - in: header
          name: token
          description: JWT token bearer
          required: true
          schema:
            type: string
      requestBody:
        description: Информация для создания нового предложения
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createOffer'
        required: true
      responses:
        "201":
          description: Предложение создано. Объект предложения.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
        "401":
          description: 'Предложение не может быть создано: пользователь не авторизован.'
        "400":
          description: 'Предложение не может быть создано: ошибка валидации.'

  /offers/{offerId}:
    patch:
      tags:
        - offers
      summary: Редактирование предложения
      description: Редактирует предложение по аренде
      parameters:
        - in: header
          name: token
          description: JWT token bearer
          required: true
          schema:
            type: string
        - in: path
          name: offerId
          description: the offer ID number
          required: true
          schema:
            type: string
      requestBody:
        description: Информация для редактирования предложения
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateOffer'
        required: true
      responses:
        "200":
          description: Предложение успешно отредактировано.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
        "400":
          description: 'Предложение не может быть отредактировано: ошибка запроса.'
        "403":
          description: 'Предложение не может быть отредактировано: у пользователя нет права доступа к объекту.'
        "401":
          description: 'Предложение не может быть отредактировано: пользователь не авторизован.'

    delete:
      tags:
        - offers
      summary: Удаление предложения
      description: Удаляет предложение по аренде
      parameters:
        - in: header
          name: token
          description: JWT token bearer
          required: true
          schema:
            type: string
        - in: path
          name: offerId
          description: the offer ID number
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Предложение успешно удалено.
        "400":
          description: 'Предложение не может быть удалено: ошибка запроса.'
        "403":
          description: 'Предложение не может быть удалено: у пользователя нет прав доступа к объекту.'
        "401":
          description: 'Предложение не может быть удалено: пользователь не авторизован.'

    get:
      tags:
        - offers
      summary: Получение детальной информации о предложении
      description: Получает детальную информации о предложении по аренде
      parameters:
        - in: header
          name: token
          description: JWT token bearer
          required: false
          schema:
            type: string
        - in: path
          name: offerId
          description: the offer ID number
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Получение детальной информации о предложении.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
        "400":
          description: 'Детальная информация о предложении недоступна: ошибка запроса.'

  /offers/image/{offerId}:
    post:
      tags:
        - offers
      summary: Загрузка изображения для объявления
      description: Загружает изображение для объявления
      parameters:
        - in: header
          name: token
          description: JWT token bearer
          required: true
          schema:
            type: string
        - in: path
          name: offerId
          description: the offer ID number
          required: true
          schema:
            type: string
      responses:
        "201":
          description: Изображение загружено. Объект со ссылкой на файл изображения.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uploadImage'
        "400":
            description: 'Изображение не может быть загружено: ошибка запроса.'
        "403":
          description: 'Изображение не может быть загружено: у пользователя нет права доступа к объекту.'
        "401":
          description: 'Изображение не может быть загружено: пользователь не авторизован.'

  /offers/premium/{city}:
    get:
      tags:
        - offers
      summary: Получение списка премиальных предложений по аренде для определенного города
      description: Получает список премиальных предложений по аренде для определенного города
      parameters:
        - in: header
          name: token
          description: JWT token bearer
          required: false
          schema:
            type: string
        - in: path
          name: city
          description: the city name
          required: true
          schema:
            enum:
              - Amsterdam
              - Paris
              - Hamburg
              - Cologne
              - Dusseldorf
              - Brussels
            type: string
      responses:
        "200":
          description: Получение списка премиальных предложений для определенного города.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offersList'
        "400":
          description: 'Список премиальных предложений недоступен: ошибка запроса.'

  /offers/favorites:
    get:
      tags:
        - offers
      summary: Получение списка избранных предложений по аренде
      description: Получает список избранных предложений по аренде
      parameters:
        - in: header
          name: token
          description: JWT token bearer
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Получение списка избранных предложений.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offersList'
        "400":
          description: 'Список избранных предложений недоступен: ошибка запроса.'
        "401":
          description: 'Список избранных предложений недоступен: пользователь не авторизован.'

  /users/login:
    post:
      tags:
        - users
      summary: Вход в закрытую часть приложения.
      description: Возвращает токен авторизации пользователя.
      requestBody:
        description: Информация для входа в закрытую часть приложения
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginUser'
        required: true
      responses:
        "200":
          description: Пользователь авторизован. Токен пользователя.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loggedUser'
        "400":
          description: 'Информация об авторизации недоступна:ошибка запроса.'
        "401":
          description: 'Информация об авторизации недоступна: логин или пароль неверный или пользователь не существует.'
    get:
      tags:
        - users
      summary: Проверка состояния пользователя.
      description: Возвращает информацию об состоянии авторизации пользователя.
      responses:
        "200":
          description: Получение информациии об авторизации пользователя.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        "401":
          description: 'Информация об авторизации недоступна: Пользователь не авторизован.'

  /users/signin:
    post:
      tags:
        - users
      summary: Создание нового пользователя.
      description: Создает нового пользователя.
      requestBody:
        description: Информация для создания нового пользователя
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
        required: true
      responses:
        "201":
          description: Новый пользователь создан. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        "409":
          description: 'Новый пользователь не может быть создан: пользователь с таким email уже существует.'
        "400":
          description: 'Новый пользователь не может быть создан: ошибка валидации.'
        "401":
          description: 'Новый пользователь не может быть создан: пользователь уже авторизован.'

  /users/avatar:
    post:
      tags:
        - users
      summary: Загрузка аватара пользователя.
      description: Загружает изображение (аватар) пользователя в формате 'png' или 'jpg'.
      parameters:
        - in: header
          name: token
          description: JWT token bearer
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Аватар пользователя успешно загружен.
        "400":
          description: 'Аватар не может быть загружен: ошибка запроса.'
        "401":
          description: 'Аватар не может быть загружен: пользователь не авторизован.'

  /users/favorites/{offerId}:
    post:
      tags:
        - offers
        - users
      summary: Добавление/удаление предложения в/из избранное.
      description: Добавляет/удаляет предложения в/из избранное.
      parameters:
        - in: header
          name: token
          description: JWT token bearer
          required: true
          schema:
            type: string
        - in: path
          name: offerId
          description: the offer ID number
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Предложение успешно добавлено/удалено в/из избранного.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
        "400":
          description: 'Предложение не может быть добавлено/удалено в/из избранного: ошибка запроса.'
        "401":
          description: 'Предложение не может быть добавлено/удалено в/из избранного: пользователь не авторизован.'

  /comments/{offerId}:
    get:
      tags:
        - comments
      summary: Получение списка комментариев для предложения
      description: Возвращает список комментариев для предложения
      parameters:
        - in: path
          name: offerId
          description: the offer ID number
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Получение списка комментариев.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commentsList'
        "400":
          description: 'Список предложений недоступен: ошибка запроса.'

    post:
      tags:
        - comments
      summary: Добавление комментария для предложения
      description: Добавляет новый комментарий для предложения
      parameters:
        - in: header
          name: token
          description: JWT token bearer
          required: true
          schema:
            type: string
        - in: path
          name: offerId
          description: the offer ID number
          required: true
          schema:
            type: string
      requestBody:
        description: Информация для создания нового комментария
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createComment'
        required: true
      responses:
        "201":
          description: Комментарий создан. Объект комментария.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
        "401":
          description: 'Комментарий не может быть создан: пользователь не авторизован.'
        "400":
          description: 'Комментарий не может быть создан: ошибка валидации.'

components:
  schemas:
    createUser:
      type: object
      required:
        - email
        - name
        - password
        - userType
      properties:
        email:
          type: string
          pattern: name@domain.com
          example: keks@keks.com
        name:
          type: string
          minLength: 1
          maxLength: 15
          example: Keks
        password:
          type: string
          minLength: 6
          maxLength: 12
          example: 123456
        avatarURL:
          type: string
          example: avatar.png
        userType:
          type: string
          enum: [pro, regular]
          example: regular
    createOffer:
      type: object
      required:
        - title
        - description
        - city
        - previewImageURL
        - images
        - isPremium
        - type
        - bedrooms
        - maxAdults
        - price
        - goods
        - coordinates
      properties:
        title:
          type: string
          minLength: 10
          maxLength: 100
          example: Lorem ipsum dolor sit amet.
        description:
          type: string
          minLength: 20
          maxLength: 1024
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
        city:
          type: string
          enum: [Paris, Amsterdam, Cologne, Brussels, Dusseldorf, Hamburg]
          example: Amsterdam
        previewImageURL:
          type: string
          example: 'https://www.domain.com/image.png'
        images:
          type: array
          minItems: 6
          maxItems: 6
          items:
            type: string
          example: [https://www.domain.com/image1.png, https://www.domain.com/image2.jpg', https://www.domain.com/image3.png, https://www.domain.com/image4.png, https://www.domain.com/image5.jpg', https://www.domain.com/image6.png]
        isPremium:
          type: boolean
          example: true
        type:
          type: string
          enum: [apartment, house, room, hotel]
          example: house
        bedrooms:
          type: number
          minimum: 1
          maximum: 8
          example: 1
        maxAdults:
          type: number
          minimum: 1
          maximum: 10
          example: 3
        price:
          type: number
          minimum: 100
          maximum: 100000
          example: 1000
        goods:
          type: array
          minItems: 1
          items:
            type: string
            enum: [Breakfast, Air conditioning, Laptop friendly workspace, Baby seat, Washer, Towels, Fridge]
          example: [Breakfast, Air conditioning]
        coordinates:
          type: object
          properties:
            latitude:
              type: number
              minimum: -90
              maximum: 90
              example: 52.370216
            longitude:
              type: number
              minimum: 180
              maximum: 180
              example: 4.895168
    updateOffer:
      type: object
      properties:
        title:
          type: string
          minLength: 10
          maxLength: 100
          example: Lorem ipsum dolor sit amet.
        description:
          type: string
          minLength: 20
          maxLength: 1024
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
        offerDate:
          type: string
          format: date-time
          example: 01/01/2023T12:23:34.843Z
        city:
          type: string
          enum: [Paris, Amsterdam, Cologne, Brussels, Dusseldorf, Hamburg]
          example: Amsterdam
        previewImageURL:
          type: string
          example: https://www.domain.com/image.png
        images:
          type: array
          minItems: 6
          maxItems: 6
          items:
            type: string
          example: [https://www.domain.com/image1.png, https://www.domain.com/image.jpg', https://www.domain.com/image3.png]
        isPremium:
          type: boolean
          example: true
        rating:
          type: number
          example: 3
        type:
          type: string
          enum: [apartment, house, room, hotel]
          example: house
        bedrooms:
          type: number
          minimum: 1
          maximum: 8
          example: 1
        maxAdults:
          type: number
          minimum: 1
          maximum: 10
          example: 3
        price:
          type: number
          minimum: 100
          maximum: 100000
          example: 1000
        goods:
          type: array
          minItems: 1
          items:
            type: string
            enum: [Breakfast, Air conditioning, Laptop friendly workspace, Baby seat, Washer, Towels, Fridge]
          example: [Breakfast, Air conditioning]
        hostId:
          type: string
          example: sdfsdf2343sdfsdfs
        coordinates:
          type: object
          properties:
            latitude:
              type: number
              minimum: -90
              maximum: 90
              example: 52.370216
            longitude:
              type: number
              minimum: 180
              maximum: 180
              example: 4.895168
    user:
      type: object
      required:
        - email
        - name
        - avatarURL
        - userType
      properties:
        email:
          type: string
          pattern: name@domain.com
          example: keks@keks.com
        name:
          type: string
          minLength: 1
          maxLength: 15
          example: slfjsldfjsdf
        avatarURL:
          type: string
          example: avatar.png
        userType:
          type: string
          enum: [pro, regular]
          example: regular
    uploadImage:
      type: object
      required:
        - previewImageURL
      properties:
        previewImageURL:
          type: string
          example: 'https://www.domain.com/image.png'
    offer:
      type: object
      required:
        - title
        - description
        - offerDate
        - city
        - previewImageURL
        - images
        - isPremium
        - isFavorite
        - rating
        - type
        - bedrooms
        - maxAdults
        - price
        - goods
        - host
        - reviews
        - coordinates
      properties:
        title:
          type: string
          minLength: 10
          maxLength: 100
          example: Lorem ipsum dolor sit amet.
        description:
          type: string
          minLength: 20
          maxLength: 1024
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
        offerDate:
          type: string
          format: date-time
          example: 01/01/2023T12:23:34.843Z
        city:
          type: string
          enum: [Paris, Amsterdam, Cologne, Brussels, Dusseldorf, Hamburg]
          example: Amsterdam
        previewImageURL:
          type: string
          example: 'https://www.domain.com/image.png'
        images:
          type: array
          minItems: 6
          maxItems: 6
          items:
            type: string
          example: [https://www.domain.com/image1.png, https://www.domain.com/image.jpg', https://www.domain.com/image3.png]
        isPremium:
          type: boolean
          example: true
        isFavorite:
          type: boolean
          example: true
        rating:
          type: number
          minimum: 0
          maximum: 5
          example: 3
        type:
          type: string
          enum: [apartment, house, room, hotel]
          example: house
        bedrooms:
          type: number
          minimum: 1
          maximum: 8
          example: 1
        maxAdults:
          type: number
          minimum: 1
          maximum: 10
          example: 3
        price:
          type: number
          minimum: 100
          maximum: 100000
          example: 1000
        goods:
          type: array
          minItems: 1
          items:
            type: string
            enum: [Breakfast, Air conditioning, Laptop friendly workspace, Baby seat, Washer, Towels, Fridge]
          example: [Breakfast, Air conditioning]
        host:
          type: object
          required:
          - email
          - name
          - avatarURL
          - userType
          properties:
            email:
              type: string
              pattern: name@domain.com
              example: keks@keks.com
            name:
              type: string
              minLength: 1
              maxLength: 15
              example: slfjsldfjsdf
            avatarURL:
              type: string
              example: avatar.png
            userType:
              type: string
              enum: [pro, regular]
              example: regular
        reviews:
          type: number
          example: 12
        coordinates:
          type: object
          properties:
            latitude:
              type: number
              minimum: -90
              maximum: 90
              example: 52.370216
            longitude:
              type: number
              minimum: 180
              maximum: 180
              example: 4.895168
    offersList:
      type: array
      items:
        type: object
        required:
          - title
          - offerDate
          - city
          - previewImageURL
          - isPremium
          - isFavorite
          - rating
          - type
          - price
          - reviews
        properties:
          title:
            type: string
            minLength: 10
            maxLength: 100
            example: Lorem ipsum dolor sit amet.
          offerDate:
            type: string
            format: date-time
            example: 01/01/2023T12:23:34.843Z
          city:
            type: string
            enum: [Paris, Amsterdam, Cologne, Brussels, Dusseldorf, Hamburg]
            example: Amsterdam
          previewImageURL:
            type: string
            example: 'https://www.domain.com/image.png'
          isPremium:
            type: boolean
            example: true
          isFavorite:
            type: boolean
            example: true
          rating:
            type: number
            minimum: 0
            maximum: 5
            example: 3
          type:
            type: string
            enum: [apartment, house, room, hotel]
            example: house
          price:
            type: number
            minimum: 100
            maximum: 100000
            example: 1000
          reviews:
            type: number
            example: 12
    comment:
      type: object
      required:
        - text
        - commentDate
        - rating
        - authorId
      properties:
        text:
          type: string
          minLength: 5
          maxLength: 1024
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
        commentDate:
          type: string
          format: date-time
          example: 01/01/2023T12:23:34.843Z
        rating:
          type: number
          minimum: 1
          maximum: 5
          example: 4
        authorId:
          type: object
          required:
          - email
          - name
          - avatarURL
          - userType
          properties:
            email:
              type: string
              pattern: name@domain.com
              example: keks@keks.com
            name:
              type: string
              minLength: 1
              maxLength: 15
              example: slfjsldfjsdf
            avatarURL:
              type: string
              example: avatar.png
            userType:
              type: string
              enum: [pro, regular]
              example: regular
    createComment:
      type: object
      required:
        - text
        - rating
      properties:
        text:
          type: string
          minLength: 5
          maxLength: 1024
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
        rating:
          type: number
          minimum: 1
          maximum: 5
          example: 4
    commentsList:
      type: array
      items:
        type: object
      properties:
        text:
          type: string
          minLength: 5
          maxLength: 1024
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
        commentDate:
          type: string
          format: date-time
          example: 01/01/2023T12:23:34.843Z
        rating:
          type: number
          minimum: 1
          maximum: 5
          example: 4
        authorId:
          type: object
          required:
          - email
          - name
          - avatarURL
          - userType
          properties:
            email:
              type: string
              pattern: name@domain.com
              example: keks@keks.com
            name:
              type: string
              minLength: 1
              maxLength: 15
              example: slfjsldfjsdf
            avatarURL:
              type: string
              example: avatar.png
            userType:
              type: string
              enum: [pro, regular]
              example: regular
    loginUser:
      type: object
      required:
        - password
        - email
      properties:
        password:
          type: string
          minLength: 6
          maxLength: 12
          example: saldf23lj34ljn67
        email:
          type: string
          pattern: name@domain.com
          example: keks@keks.com
    loggedUser:
      type: object
      required:
        - email
        - avatarURL
        - userToken
      properties:
        email:
          type: string
          pattern: name@domain.com
          example: keks@keks.com
        avatarURL:
          type: string
          example: avatar.png
        userToken:
          type: string
          example: saldf23lj34ljn67



